/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * An error occurred interacting with the API.
 */
export type APIErrorData = {
    code?: string | undefined;
    details?: { [k: string]: any } | undefined;
    message?: string | undefined;
};

/**
 * An error occurred interacting with the API.
 */
export class APIError extends Error {
    code?: string | undefined;
    details?: { [k: string]: any } | undefined;

    /** The original data that was passed to this error instance. */
    data$: APIErrorData;

    constructor(err: APIErrorData) {
        super("");
        this.data$ = err;

        if (err.code != null) {
            this.code = err.code;
        }
        if (err.details != null) {
            this.details = err.details;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "APIError";
    }
}

/** @internal */
export namespace APIError$ {
    export const inboundSchema: z.ZodType<APIError, z.ZodTypeDef, unknown> = z
        .object({
            code: z.string().optional(),
            details: z.record(z.any()).optional(),
            message: z.string().optional(),
        })
        .transform((v) => {
            return new APIError(v);
        });

    export type Outbound = {
        code?: string | undefined;
        details?: { [k: string]: any } | undefined;
        message?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, APIError> = z
        .instanceof(APIError)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                code: z.string().optional(),
                details: z.record(z.any()).optional(),
                message: z.string().optional(),
            })
        );
}
